<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Portfolio | Jason Light</title>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Jost" >
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@100..900&display=swap" rel="stylesheet">
    
    <link rel="stylesheet" href="/css/style.css">
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

</head>
<body >
    <div class="alert alert-danger d-a m-0" role="alert">
        <span lang="en">This page is a work in progress!</span>
        <span lang="ja">このページは作成中です！</span>
    </div>
    <!-- <div class="header" id="header">
        <div class="left">
            <span class="btn">Test Button</span>
        </div>
        <div class="right">
            <nav class="navbar">
                <a href="/" class="selected">Home</a>
                <a href="">Work</a>
                <a href="/about">About</a>
            </nav>
        </div>
    </div> -->

    <span id="language-button">
        <img src="img/globe.svg" alt="lang">
    </span>

    <div class="hero container-responsive text-light">
        <div class="d-flex justify-content-center align-items-center flex-column flex-sm-row h-100">
            
            <img class="me" src="/img/rirekishophoto.webp" alt="Me">
            <div class="p-4 leader">
                <h1 class="display-1" lang="en">
                    Hi, I'm Jason!
                    <p class="fs-2" style="color: #eeeeee;">Programmer</p> 
                </h1>

                <h1 class="display-1" lang="ja">
                    こんにちは、Jasonです&excl;
                    <p class="fs-2" style="color: #eeeeee;">プログラマー</p> 
                </h1>
            </div>

        </div>
        <div class="p-a l-20 row" style="margin-top:-4em; margin-left: 4em">
            Web design: Helena Ip<br>
            Web development: Jason Light
        </div>

    </div>

    <!-- For absolute positioning -->
    <div id="moving-container" style="position: relative; width: 100vw;"> 

        <div id="projects" class="projects">
            {%- for project in collections.project -%}
            <div class="project" data-name="{{ project.data.slug }}">
                <img src="{{ project.data.thumbnail }}" alt="" class="thumb">

                <div class="popup">
                    <h2 class="title">{{ project.data.title }}</h2>
                    <span class="descriotion">{{ project.data.description}} </span>
                </div>

                <div class="tags">
                    {%- for tag in project.data.categories %}
                    <span class="tag"><p>{{ tag }}</p></span>
                    {% endfor %}
                </div>

            </div>
            {%- endfor -%}

        </div>

        <div id="content" style="width: 100%">


        </div>

    </div>

    <script>
        (function() {
            "use strict";
            const header = document.getElementById("header");
            const projects = document.getElementsByClassName("project");
            const content_container = document.getElementById("content");
            const home_page = content_container.innerHTML;
            const language_button = document.getElementById("language-button");



            // Do language detection
            var user_lang = navigator.language || navigator.userLanguage; 
            var language =  /*window.localStorage.getItem("language") ||*/ /ja/.test(user_lang) ? "ja" : "en";
            console.log(language);

            window.localStorage.setItem("language", language);

            if (language == "ja") {
                document.body.classList.add("ja");
            }

            const toggle_language = () => {
                language = language == "en" ? "ja" : "en";
                
                if (language == "ja") {
                    document.body.classList.add("ja");
                } else {
                    document.body.classList.remove("ja");

                }
            }

            language_button.addEventListener("click", toggle_language);


            let project_paths = {};
            let scroll_points = [];

            // Yoinked from https://pqina.nl/blog/applying-styles-based-on-the-user-scroll-position-with-smart-css/
            const debounce = (fn) => {
                let frame;

                return (...params) => {
                    if (frame) { 
                        cancelAnimationFrame(frame);
                    }

                    frame = requestAnimationFrame(() => {
                        fn(...params);
                    });
                } 
            };


            const setup_scroll_points = () => {
                let nav = document.getElementById("project-nav");

                if (nav) {
                    let nav_links = nav.getElementsByTagName("a");
                    scroll_points = [];

                    for (let i = 0; i < nav_links.length;i++) {
                        let nav_link = nav_links[i];
                        
                        let element = document.querySelector(nav_link.attributes["href"].value);
                        if (element) {
                            console.log(nav_link.attributes["href"].value);
                            console.log(window.scrollY);
                            console.log(element.offsetTop);
                            
                            scroll_points.push({
                                nav_element: nav_link,
                                target: element,
                                scrollPos: element.offsetTop
                            });


                        }

                    }

                }
            }

            const scrollHandler = e => {
                // First of all, disable all our scroll points
                for (let scroll_point of scroll_points) {
                    scroll_point.nav_element.classList.remove("active");
                }

                let idx = 0;
                while (idx < scroll_points.length && window.scrollY > scroll_points[idx].scrollPos) idx++;

                if (idx > 0 && idx < scroll_points.length) {
                    scroll_points[idx-1].nav_element.classList.add("active");
                }
            };

            document.addEventListener("scroll", scrollHandler, { passive: true });

            const open_project = (project_name, add_history=true, animate=true) => {
                let project_link = `/projects/${project_name}`;


                if (language == "ja") {
                    project_link += "-ja";
                }

                if (animate) {
                    document.body.classList.add("transition");
                }
                

                fetch(project_link).then(response => {
                    return response.text();
                }).then(text => {
                    if (add_history) history.pushState(project_name, "", `/project/${project_name}`);
                    
                    content_container.innerHTML = text;


                    setTimeout(() => {
                        document.body.classList.remove("transition");
                    }, 1);

                    // This is a workaround so the height will include the height of any media elements
                    // TODO: figure out timing based on media loads?
                    window.setTimeout(() => {
                        content_container.style.height = `${content_container.scrollHeight}px`;
                        setup_scroll_points();
                    }, 1000); 

                    document.body.classList.add("project-view");

                });
            }

            const go_home = (animate) => {
                document.body.classList.add("transition");
                document.body.classList.remove("project-view");
                content_container.style.height = "";
                content_container.innerHTML = "";

                setTimeout(() => {
                    document.body.classList.remove("transition");
                }, 1);
            }

            // Add click handlers to projects
            for (let i = 0; i < projects.length; i++) {
                let project = projects[i];

                if ("data-name" in project.attributes) {
                    let project_name = project.attributes["data-name"].value;
                    project.addEventListener("click", e => open_project(project_name, true));
                }
            }


            const route = (animate) => {
                const project_path_regex = /\/project\/([a-zA-Z0-9]*)/;

                if (document.location.pathname == "/") {
                    go_home();

                    if(event) event.preventDefault();
                }
                else if (project_path_regex.test(document.location.pathname)) {
                    let match = document.location.pathname.match(project_path_regex);
                    open_project(match[1], false, animate)
                }
            }

            window.addEventListener("popstate", e => {
                route(true);
                e.preventDefault()
            });

            history.scrollRestoration = "manual";

            route(null, false);
        })();
    </script>
</body>
</html>